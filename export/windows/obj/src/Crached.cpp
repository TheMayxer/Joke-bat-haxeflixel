// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Crached
#include <Crached.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f614499af20540d3_9_new,"Crached","new",0x60ebb1e8,"Crached.new","Crached.hx",9,0x02bb0288)
HX_LOCAL_STACK_FRAME(_hx_pos_f614499af20540d3_17_update,"Crached","update",0x71b54981,"Crached.update","Crached.hx",17,0x02bb0288)
HX_LOCAL_STACK_FRAME(_hx_pos_f614499af20540d3_19_update,"Crached","update",0x71b54981,"Crached.update","Crached.hx",19,0x02bb0288)

void Crached_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_f614499af20540d3_9_new)
HXLINE(  10)		super::__construct();
HXLINE(  11)		::flixel::FlxG_obj::cameras->set_bgColor(1997055);
HXLINE(  12)		 ::flixel::FlxSprite shit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->loadGraphic(HX_("images/message.png",6b,f7,13,54),null(),null(),null(),null(),null());
HXLINE(  13)		{
HXLINE(  13)			int axes = 17;
HXDLIN(  13)			bool _hx_tmp;
HXDLIN(  13)			if ((axes != 1)) {
HXLINE(  13)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  13)				_hx_tmp = true;
            			}
HXDLIN(  13)			if (_hx_tmp) {
HXLINE(  13)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  13)				shit->set_x(((( (Float)(_hx_tmp1) ) - shit->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  13)			bool _hx_tmp2;
HXDLIN(  13)			if ((axes != 16)) {
HXLINE(  13)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  13)				_hx_tmp2 = true;
            			}
HXDLIN(  13)			if (_hx_tmp2) {
HXLINE(  13)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  13)				shit->set_y(((( (Float)(_hx_tmp3) ) - shit->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  14)		this->add(shit);
            	}

Dynamic Crached_obj::__CreateEmpty() { return new Crached_obj; }

void *Crached_obj::_hx_vtable = 0;

Dynamic Crached_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Crached_obj > _hx_result = new Crached_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Crached_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x528a8336) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x528a8336;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void Crached_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f614499af20540d3_17_update)
HXLINE(  18)		this->super::update(elapsed);
HXLINE(  19)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  19)		if (_this->keyManager->checkStatusUnsafe(82,_this->status)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			 ::PlayState _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f614499af20540d3_19_update)
HXLINE(  19)				return  ::PlayState_obj::__alloc( HX_CTX );
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_f614499af20540d3_19_update)
HXLINE(  19)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  19)					::flixel::FlxG_obj::game->_nextState = nextState;
            				}
            				else {
HXLINE(  19)					::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  19)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  19)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  19)			::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            		}
            	}



::hx::ObjectPtr< Crached_obj > Crached_obj::__new() {
	::hx::ObjectPtr< Crached_obj > __this = new Crached_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Crached_obj > Crached_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Crached_obj *__this = (Crached_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Crached_obj), true, "Crached"));
	*(void **)__this = Crached_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Crached_obj::Crached_obj()
{
}

::hx::Val Crached_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Crached_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Crached_obj_sStaticStorageInfo = 0;
#endif

static ::String Crached_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Crached_obj::__mClass;

void Crached_obj::__register()
{
	Crached_obj _hx_dummy;
	Crached_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Crached",f6,dd,6a,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Crached_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Crached_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Crached_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Crached_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

