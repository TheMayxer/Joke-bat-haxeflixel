// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_Crached
#include <Crached.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_TypeShii
#include <TypeShii.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_15_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",15,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_46_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",46,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_24_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",24,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_61_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",61,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_81_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",81,0xb30d7781)

void PlayState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_15_new)
HXLINE(  20)		this->maxWin = ::flixel::FlxG_obj::random->_hx_int(2,10,null());
HXLINE(  19)		this->quantities = 0;
HXLINE(  15)		super::__construct();
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_46_create)
HXLINE(  47)			 ::TypeShii error =  ::TypeShii_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ));
HXLINE(  48)			 ::flixel::math::FlxRandom _hx_tmp = ::flixel::FlxG_obj::random;
HXDLIN(  48)			int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  48)			error->set_x(_hx_tmp->_hx_float(0,(( (Float)(_hx_tmp1) ) - error->get_width()),null()));
HXLINE(  49)			 ::flixel::math::FlxRandom _hx_tmp2 = ::flixel::FlxG_obj::random;
HXDLIN(  49)			int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  49)			error->set_y(_hx_tmp2->_hx_float(0,(( (Float)(_hx_tmp3) ) - error->get_height()),null()));
HXLINE(  50)			_gthis->errosGroup->add(error).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  51)			_gthis->quantities++;
HXLINE(  52)			::haxe::Log_obj::trace(_gthis->quantities,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),52,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_24_create)
HXDLIN(  24)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  25)		this->super::create();
HXLINE(  26)		 ::flixel::addons::display::FlxBackdrop chess =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,HX_("images/chess.png",a4,9c,cd,a0),17,((Float)0.0),((Float)0.0));
HXLINE(  27)		{
HXLINE(  27)			 ::flixel::math::FlxBasePoint this1 = chess->velocity;
HXDLIN(  27)			this1->set_x(( (Float)(30) ));
HXDLIN(  27)			this1->set_y(( (Float)(30) ));
            		}
HXLINE(  28)		this->add(chess);
HXLINE(  30)		 ::flixel::FlxSprite taskbar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)-13.2),((Float)420.95),null())->loadGraphic(HX_("images/taskbar.png",d2,4c,12,4f),null(),null(),null(),null(),null());
HXLINE(  31)		this->add(taskbar);
HXLINE(  33)		 ::flixel::FlxSprite windows =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)5.2),((Float)427.75),null())->loadGraphic(HX_("images/windows.png",27,ae,c0,a0),null(),null(),null(),null(),null());
HXLINE(  34)		this->add(windows);
HXLINE(  36)		 ::flixel::FlxSprite search =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)72.3),((Float)430.85),null())->loadGraphic(HX_("images/search.png",da,cb,78,64),null(),null(),null(),null(),null());
HXLINE(  37)		this->add(search);
HXLINE(  39)		 ::flixel::FlxSprite trash =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((Float)13.8),((Float)24.6),null())->loadGraphic(HX_("images/trash.png",5c,ce,0f,e3),null(),null(),null(),null(),null());
HXLINE(  40)		this->add(trash);
HXLINE(  42)		this->errosGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  43)		this->add(this->errosGroup);
HXLINE(  45)		this->spawnError =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE(  46)		 ::flixel::util::FlxTimer _hx_tmp = this->spawnError;
HXDLIN(  46)		_hx_tmp->start(::flixel::FlxG_obj::random->_hx_float(((Float)0.5),2,null()), ::Dynamic(new _hx_Closure_0(_gthis)),0);
HXLINE(  55)		this->quantitiesWindow =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,HX_("Max of windows: coiso/0",3e,fc,c3,f4),20,null());
HXLINE(  56)		this->quantitiesWindow->setFormat(HX_("fonts/comic-sans.ttf",e8,01,dd,a5),20,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  57)		this->add(this->quantitiesWindow);
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_61_update)
HXLINE(  62)		this->super::update(elapsed);
HXLINE(  64)		this->quantitiesWindow->set_text((((HX_("Max of windows: ",bc,e2,5c,d0) + this->maxWin) + HX_("/",2f,00,00,00)) + this->quantities));
HXLINE(  65)		{
HXLINE(  65)			int _g = 0;
HXDLIN(  65)			::Array< ::Dynamic> _g1 = this->errosGroup->members;
HXDLIN(  65)			while((_g < _g1->length)){
HXLINE(  65)				 ::flixel::FlxSprite turip = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  65)				_g = (_g + 1);
HXLINE(  66)				bool _hx_tmp;
HXDLIN(  66)				if (::flixel::FlxG_obj::mouse->overlaps(turip,null())) {
HXLINE(  66)					_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            				}
            				else {
HXLINE(  66)					_hx_tmp = false;
            				}
HXDLIN(  66)				if (_hx_tmp) {
HXLINE(  68)					this->errosGroup->remove(turip,true).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  69)					this->quantities--;
HXLINE(  70)					::haxe::Log_obj::trace(this->quantities,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),70,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(  71)					{
HXLINE(  71)						 ::flixel::math::FlxBasePoint this1 = this->quantitiesWindow->scale;
HXDLIN(  71)						this1->set_x(((Float)0.8));
HXDLIN(  71)						this1->set_y(((Float)0.6));
            					}
HXLINE(  72)					::flixel::tweens::FlxTween_obj::cancelTweensOf(this->quantitiesWindow,null());
HXLINE(  73)					::flixel::tweens::FlxTween_obj::tween(this->quantitiesWindow, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("scale.x",94,2d,07,65),1)
            						->setFixed(1,HX_("scale.y",95,2d,07,65),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::smoothStepOut_dyn())
            						->setFixed(1,HX_("type",ba,f2,08,4d),8)));
            				}
            			}
            		}
HXLINE(  77)		if ((this->quantities >= this->maxWin)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				 ::Crached _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_81_update)
HXLINE(  81)					return  ::Crached_obj::__alloc( HX_CTX );
            				}
            				HX_END_LOCAL_FUNC0(return)

            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_81_update)
HXLINE(  81)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  81)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  81)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true,::hx::SourceInfo(HX_("flixel/FlxG.hx",36,68,17,8e),385,HX_("flixel.FlxG",07,ab,3b,0e),HX_("switchState",7d,07,8b,77)));
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_81_update)
HXLINE(  81)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromMaker( ::Dynamic(new _hx_Closure_0()));
HXDLIN(  81)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  81)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState,stateOnCall)));
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(  79)			this->spawnError->cancel();
HXLINE(  80)			::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.5))),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::smootherStepOut_dyn())
            				->setFixed(1,HX_("type",ba,f2,08,4d),8)));
HXLINE(  81)			::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.7),false, ::Dynamic(new _hx_Closure_2()),false);
            		}
            	}



::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new() {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(spawnError,"spawnError");
	HX_MARK_MEMBER_NAME(errosGroup,"errosGroup");
	HX_MARK_MEMBER_NAME(quantities,"quantities");
	HX_MARK_MEMBER_NAME(maxWin,"maxWin");
	HX_MARK_MEMBER_NAME(quantitiesWindow,"quantitiesWindow");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(spawnError,"spawnError");
	HX_VISIT_MEMBER_NAME(errosGroup,"errosGroup");
	HX_VISIT_MEMBER_NAME(quantities,"quantities");
	HX_VISIT_MEMBER_NAME(maxWin,"maxWin");
	HX_VISIT_MEMBER_NAME(quantitiesWindow,"quantitiesWindow");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maxWin") ) { return ::hx::Val( maxWin ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"spawnError") ) { return ::hx::Val( spawnError ); }
		if (HX_FIELD_EQ(inName,"errosGroup") ) { return ::hx::Val( errosGroup ); }
		if (HX_FIELD_EQ(inName,"quantities") ) { return ::hx::Val( quantities ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"quantitiesWindow") ) { return ::hx::Val( quantitiesWindow ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maxWin") ) { maxWin=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"spawnError") ) { spawnError=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"errosGroup") ) { errosGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"quantities") ) { quantities=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"quantitiesWindow") ) { quantitiesWindow=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("spawnError",8d,27,42,ad));
	outFields->push(HX_("errosGroup",b6,fe,53,75));
	outFields->push(HX_("quantities",a9,b4,ff,f6));
	outFields->push(HX_("maxWin",d8,93,58,be));
	outFields->push(HX_("quantitiesWindow",79,21,8b,d2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,spawnError),HX_("spawnError",8d,27,42,ad)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,errosGroup),HX_("errosGroup",b6,fe,53,75)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,quantities),HX_("quantities",a9,b4,ff,f6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,maxWin),HX_("maxWin",d8,93,58,be)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,quantitiesWindow),HX_("quantitiesWindow",79,21,8b,d2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("spawnError",8d,27,42,ad),
	HX_("errosGroup",b6,fe,53,75),
	HX_("quantities",a9,b4,ff,f6),
	HX_("maxWin",d8,93,58,be),
	HX_("quantitiesWindow",79,21,8b,d2),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

