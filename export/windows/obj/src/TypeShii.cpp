// Generated by Haxe 4.3.7
#include <hxcpp.h>

#ifndef INCLUDED_TypeShii
#include <TypeShii.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e8da40de5d252bef_8_new,"TypeShii","new",0xd51e3421,"TypeShii.new","TypeShii.hx",8,0xd1e36a6f)

void TypeShii_obj::__construct(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_e8da40de5d252bef_8_new)
HXLINE(  10)		this->randomNums = ::flixel::FlxG_obj::random->_hx_int(0,3,null());
HXLINE(  12)		super::__construct(x,y,null());
HXLINE(  13)		this->loadGraphic(((HX_("images/errors/",8d,6e,33,59) + ::flixel::FlxG_obj::random->_hx_int(0,3,null())) + HX_(".png",3b,2d,bd,1e)),null(),null(),null(),null(),null());
HXLINE(  14)		{
HXLINE(  14)			 ::flixel::math::FlxBasePoint this1 = this->scale;
HXDLIN(  14)			this1->set_x(((Float)1.2));
HXDLIN(  14)			this1->set_y(((Float)1.2));
            		}
HXLINE(  15)		::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("scale.x",94,2d,07,65),1)
            			->setFixed(1,HX_("scale.y",95,2d,07,65),1)),((Float)0.7), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),8)));
            	}

Dynamic TypeShii_obj::__CreateEmpty() { return new TypeShii_obj; }

void *TypeShii_obj::_hx_vtable = 0;

Dynamic TypeShii_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TypeShii_obj > _hx_result = new TypeShii_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TypeShii_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x454267d3) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x454267d3;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}


::hx::ObjectPtr< TypeShii_obj > TypeShii_obj::__new(Float x,Float y) {
	::hx::ObjectPtr< TypeShii_obj > __this = new TypeShii_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< TypeShii_obj > TypeShii_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
	TypeShii_obj *__this = (TypeShii_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TypeShii_obj), true, "TypeShii"));
	*(void **)__this = TypeShii_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

TypeShii_obj::TypeShii_obj()
{
}

::hx::Val TypeShii_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"randomNums") ) { return ::hx::Val( randomNums ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TypeShii_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"randomNums") ) { randomNums=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TypeShii_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("randomNums",10,ab,e3,b8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TypeShii_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(TypeShii_obj,randomNums),HX_("randomNums",10,ab,e3,b8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TypeShii_obj_sStaticStorageInfo = 0;
#endif

static ::String TypeShii_obj_sMemberFields[] = {
	HX_("randomNums",10,ab,e3,b8),
	::String(null()) };

::hx::Class TypeShii_obj::__mClass;

void TypeShii_obj::__register()
{
	TypeShii_obj _hx_dummy;
	TypeShii_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TypeShii",af,8f,cf,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TypeShii_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TypeShii_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TypeShii_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TypeShii_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

